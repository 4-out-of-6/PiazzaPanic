buildscript {
    

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }
    dependencies {

    }
}

plugins {
  id 'jacoco'
}

jacoco {
  toolVersion = "0.8.6"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['test']) {
  reports {
    xml.enabled true
    html.enabled true
  }

  def coverageSourceDirs = [    'core/src/main/java',    'desktop/src/main/java'  ]
  classDirectories.setFrom(fileTree(
    dir: './build/classes/java/main',
    excludes: [
      '**/*Test*'
    ]
  ))
  sourceDirectories.setFrom(files(coverageSourceDirs))
  additionalSourceDirs.setFrom(files(coverageSourceDirs))
  executionData.setFrom(files("$buildDir/jacoco/jacoco.exec"))
  
  jacoco {
    // moved from `test` task
    append = false
    destinationFile = file("$buildDir/jacoco/jacoco.exec")
  }
}


allprojects {
    apply plugin: "eclipse"

    version = '1.0'
    ext {
        appName = "Piazza Panic"
        gdxVersion = '1.11.0'
        roboVMVersion = '2.3.16'
        box2DLightsVersion = '1.5'
        ashleyVersion = '1.7.4'
        aiVersion = '1.8.2'
        gdxControllersVersion = '2.2.1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://jitpack.io" }
    }
}

project(":desktop") {
    apply plugin: "java-library"


    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        
    }
}

project(":core") {
    apply plugin: "java-library"


    dependencies {
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        testImplementation(platform('org.junit:junit-bom:5.9.2'))
        testImplementation('org.junit.jupiter:junit-jupiter')
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        jacoco {
          append = false
          destinationFile = file("$buildDir/jacoco/jacoco.exec")
        }
    }
}
